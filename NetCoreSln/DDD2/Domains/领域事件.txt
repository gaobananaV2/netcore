在传统的软件系统中，对数据一致性的处理都是通过事务完成的，其中包括本地事务和全局事务。
但是，DDD的一个重要原则便是一次事务只能更新一个聚合实例。
然而，的确存在需要修改多个聚合的业务用例，那么此时我们应该怎么办呢？


在最近流行起来的微服务（Micro Service）的架构中，整个系统被分成了很多个轻量的程序模块，
他们之间的数据一致性并不容易通过事务一致性完成，此时我们又该怎么办呢？

在DDD中，领域事件便可以用于处理上述问题，此时最终一致性取代了事务一致性，
通过领域事件的方式达到各个组件之间的数据一致性。


领域事件的命名遵循英语中的“名词+动词过去分词”格式，即表示的是先前发生过的一件事情。
比如，购买者提交商品订单之后发布OrderSubmitted事件，
用户更改邮箱地址之后发布EmailAddressChanged事件。

需要注意的是，既然是领域事件，他们便应该从领域模型中发布。
领域事件的最终接收者可以是本限界上下文中的组件，也可以是另一个限界上下文。

领域事件的额外好处在于它可以记录发生在软件系统中所有的重要修改，
这样可以很好地支持程序调试和商业智能化。

另外，在CQRS架构的软件系统中，领域事件还用于写模型和读模型之间的数据同步。
再进一步发展，事件驱动架构可以演变成事件源（Event Sourcing），
即对聚合的获取并不是通过加载数据库中的瞬时状态，
而是通过重放发生在聚合生命周期中的所有领域事件完成。

